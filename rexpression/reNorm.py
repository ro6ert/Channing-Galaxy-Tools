"""
reNorm.py
A galaxy tool to normalize a raw (affybatch eg) dataset
This python script uses rpy to load and call an R script stored
here as a string called rprog
copyright Ross Lazarus 2009
released under the LGPL as documented at http://www.gnu.org/licenses/lgpl.html

see http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/R_BioCondManual.html#biocon_affypack

from www.statedu.ntu.edu.tw/data/R-tutor4.pdf
There are five normalization and probe summarization methods, MAS5,
RMA, GCRMA, Plier and dChip.
eset <- rma(mydata) # Creates normalized and background corrected
expression values using the RMA method. The generated data are stored
as ExpressionSet class in the 'eset' object. For large data sets use the more
memory efficient justRMA() function.
eset <- mas5(mydata) # Uses expresso (MAS 5.0 method) module
instead of RMA, which is much slower than RMA.
eset_gcrma <- gcrma(mydata) # Use this command to employ gcrma
method. The library(gcrma) needs to be loaded first.
eset_plier <- justPlier(mydata) # Use this command to employ plier
method. The library(plier) needs to be loaded first.
eset <- expresso(mydata, normalize.method="invariantset",
bg.correct =FALSE, pmcorrect.method="pmonly",
summary.method="liwong") # Generates expression calls similar to
dChip (MBEI) method from Li and Wong.

"""

import sys, string, glob, tempfile, shutil, os, time, subprocess


rprog="""renorm=function(infile,onormcdel,infname,tdir)
# generated by reNorm.py, part of the rexpression toolkit
# copyright Ross Lazarus 2009
# released under the LGPL as documented at http://www.gnu.org/licenses/lgpl.html
{
dataname = load(infile)
data = get(dataname)
onormlist = strsplit(onormcdel,',')[[1]]
for (i in 1:length(onormlist))
    {
    onorm = onormlist[[i]] 
    gotone = 0
    resultname=paste(infname,'eset',sep='.') 
    phenoname=paste(infname,'pheno',sep='.') 
    # all outputs are expresssionSets
    resultfname = file.path(tdir,resultname)
    phenofname = file.path(tdir,phenoname)
    if (onorm=='rma')
    {
        library(affy)
        result=rma(data)
        gotone = 1
    } # rma
    if (onorm=='gcrma')
    {
        library(gcrma)
        library(affy)
        result=gcrma(data)
        gotone = 1
    } # gcrma
    if (onorm=='liwong')
    {
        library(affy)
        result=expresso(data, normalize.method="invariantset",
        bg.correct =FALSE, pmcorrect.method="pmonly",
        summary.method="liwong")
        gotone = 1
    } # liwongish

    if (onorm=='mas5')
    {
        library(affy)
        result=mas5(data)
        gotone = 1
    }

    if (onorm=='plier')
        {
        library(plier)
        gotone = 1
        result=justPlier(data,normalize=T)
        }
    if (gotone == 1)
        {
        save(result,file=resultfname)
	write.table(file=phenofname,pData(result),sep='\t',quote=F,row.names=F)
        # for now, assume all are esets TODO fixme!
        }
    }
    # multiple onorms
}
# call our R function
renorm('%s','%s','%s','%s')
"""
# use (infile,onorm,infname,tdir)
#to instanstiate this string to get a call that will 
#run your job



galhtmlprefix = """<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Galaxy %s tool output - see http://galaxyproject.org/" />
<title></title>
<link rel="stylesheet" href="/static/style/base.css" type="text/css" />
</head>
<body>
<div class="document">
"""



galhtmlpostfix = """</div></body></html>"""
debug = False # useful for debugging RRun()
mng = '### makenewgalaxy'

def timenow():
    """return current time as a string
    """
    return time.strftime('%d/%m/%Y %H:%M:%S', time.localtime(time.time()))

def whereis(program):
    for path in os.environ.get('PATH', '').split(':'):
        if os.path.exists(os.path.join(path, program)) and \
           not os.path.isdir(os.path.join(path, program)):
            return os.path.join(path, program)
    return None

def RRun(rcmd=[],outdir='.',title='myR',rexe=None):
    """
    run an r script, lines in rcmd,
    in a temporary directory
    move everything, r script and all back to outdir which will be an html file

    
      # test
      RRun(rcmd=['print("hello cruel world")','q()'],title='test')    
    """
    rlog = []
    assert os.path.isfile(rexe) 
    rname = '%s.R' % title
    stoname = '%s.R.log' % title 
    rfname = os.path.join(outdir,rname)
    try:
        os.makedirs(outdir) # might not be there yet...
    except:
        pass
    f = open(rfname,'w')
    if type(rcmd) == type([]):
        f.write('\n'.join(rcmd))
    else:
        f.write(rcmd)
    f.write('\n')
    f.close()
    stofname = os.path.join(outdir,stoname)
    sto = file(stofname,'w')
    vcl = [rexe,"--vanilla --slave", '<', rfname ]
    x = subprocess.Popen(' '.join(vcl),shell=True,stderr=sto,stdout=sto,cwd=outdir)
    retval = x.wait()
    sto.close()
    rlog = file(stofname,'r').readlines()
    flist = os.listdir(outdir)
    flist.sort()
    for i,x in enumerate(flist):
        if x[1] == rname:
            flist[i] = (x,'## R script for %s' % title)
        elif x[1] == stoname:
            flist[i] = (x,'## R log for %s' % title)   
        else:
            flist[i] = (x,x)
    return flist,rlog # for html layout
            
def main():
    """called as 
<command interpreter="python">
reNorm.py '$i.extra_files_path/$i.metadata.base_name' '$title' '$methodtypes' '$outhtml' '$outhtml.files_path' '${GALAXY_DATA_INDEX_DIR}/rg/bin/R'
</command>

    """
    nparm = 6
    appname = sys.argv[0]
    if (len(sys.argv) < nparm):
        print '%s needs %d parameters - given %d as %s' % (appname,nparm,len(sys.argv),';'.join(sys.argv))
        sys.exit(1)
        # short command line error
    appname = sys.argv[0]
    inbase = sys.argv[1]
    infname = os.path.split(inbase)[-1] # last part
    flist = glob.glob('%s.*' % inbase)    
    infile = None
    for f in flist: # add extension
        ext = os.path.splitext(f)[-1]
        if ext == '.affybatch':
            infile = '%s.affybatch' % inbase
            break
        elif ext == '.malist':
            infile = '%s.malist' % inbase
            break
    if infile == None:
        print '%s requires an affybatch or malist rexpression dataset - supplied one, %s does not seem to exist\n' % (appname,inbase)
        sys.exit(1)
    title = sys.argv[2].strip()
    onorm = sys.argv[3].strip() # allow multiples
    outhtml = sys.argv[4].strip()
    outdir = sys.argv[5].strip()
    rexe = sys.argv[6].strip()
    try:
        os.makedirs(outdir)
    except:
        pass
    replace = string.whitespace + string.punctuation
    ttab = string.maketrans(replace,'_'*len(replace))
    title = string.translate(title,ttab)
    logf = file(outhtml,'w')
    logf.write(galhtmlprefix % appname)
    logf.write('# %s - part of the Rexpression Galaxy toolkit http://esphealth.org/trac/rgalaxy<br />\n' % (appname))
    logf.write('# Got parameters %s<br />\n' % ' '.join(sys.argv))
    rprogname = 'renorm'
    rcall = "%s('%s','%s','%s','%s')" % (rprogname,infile,onorm,infname,outdir)
    R = rprog % (infile,onorm,infname,outdir)
    # sets up our R script
    # r call is now set up for the analysis
    flist,rlog = RRun(rcmd=R,outdir=outdir,title=title,rexe=rexe)
    logf.write('<div>The following files were produced:<br/><ol>\n')
    for (f,blurb) in flist:
        logf.write('<li><a href="%s">%s</a></li>\n' % (f,blurb))
    logf.write('</ol></div>/n')
    s = '<div>R code<br/><pre>\n%s\n</pre></div>\n' % (R)
    logf.write(s)
    outlist = ['#### No new Galaxy datasets produced - unknown error','']
    if len(flist) > 2: # we have r script and r log
        outlist = ['<pre>',]
        for (f,blurb) in flist:
            if blurb[:2] <> '##': # these need to be created in history
                outlist.append('%s\t%s\t%s\teset' % (mng,os.path.join(outdir,f),blurb))
        outlist.append('</pre>')
    logf.write('\n'.join(outlist))
    logf.write('\n')
    logf.write('## R log follows:<br/><pre>\n')
    logf.write(''.join(rlog))
    logf.write('</pre><br/>\n')
    logf.close()

if __name__ == "__main__":
    main()

