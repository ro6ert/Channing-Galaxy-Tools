"""
moved from rpy - it's lovely but more moving parts - rpy2 will require rewriting anyway
writing r scripts has the advantage that the script remains as an artefact.

reQC.py
for Galaxy rexpression toolkit
copyright Ross Lazarus 2008
Licensed under the LGPL

Called as 
<command interpreter="python">
reQC.py '$i.extra_files_path/$i.metadata.base_name' '$title' '$outfile' '$outfile.files_path' '$logmeta' '$logtran'
</command>


library(arrayQualityMetrics)
arrayQualityMetrics(ETABM25.affybatch,outdir='/home/rossl/r/arrayQM2')
# outdir will probably be overwritten if force=T
 library('affyQCReport')
load('ETABM25.affyBatch')
# these images are huge pdfs but stoopid R checks for Xwin
# if we try to use png or jpg - there's probably
# a simple fix for this but the false colour ones from
# arrayqualitymeasures is probably more useful!!
#par(mfrow=c(1,1)) # or whatever works
#png(filename='image.ETABM25.png')
#image(ETABM25.affybatch)
#dev.off()
par(mfrow=c(3,3)) # or whatever works
pdf('MAplot.ETABM25.pdf',h=10,w=8)
MAplot(ETABM25.affybatch, cex=0.25, cex.main=0.5,
plot.method="smoothScatter")
dev.off()

# QCReport(ETABM25.affybatch)
pdf('qc1.pdf',h=10,w=8)
titlePage(ETABM25.affybatch)
dev.off()
pdf('qc2.pdf',h=10,w=8)
signalDist(ETABM25.affybatch)
dev.off()
pdf('qc3.pdf',h=10,w=8)
plot(qc(ETABM25.affybatch)
dev.off()
pdf('qc4.pdf',h=10,w=8)
borderQC1(ETABM25.affybatch)
dev.off()
pdf('qc5.pdf',h=10,w=8)
borderQC2(ETABM25.affybatch)
dev.off()
pdf('qc6.pdf',h=10,w=8)
correlationPlot(ETABM25.affybatch)
dev.off()


"""

import sys, string, glob, tempfile, shutil, os, time, subprocess



galhtmlprefix = """<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Galaxy %s tool output - see http://galaxyproject.org/" />
<title></title>
<link rel="stylesheet" href="/static/style/base.css" type="text/css" />
</head>
<body>
<div class="document">
"""



galhtmlpostfix = """</div></body></html>"""
debug = False # useful for debugging RRun()

def timenow():
    """return current time as a string
    """
    return time.strftime('%d/%m/%Y %H:%M:%S', time.localtime(time.time()))



def whereis(program):
    for path in os.environ.get('PATH', '').split(':'):
        if os.path.exists(os.path.join(path, program)) and \
           not os.path.isdir(os.path.join(path, program)):
            return os.path.join(path, program)
    return None


def RRun(rcmd=[],outdir='.',title='myR', rexe=None):
    """
    run an r script, lines in rcmd,
    in a temporary directory
    move everything, r script and all back to outdir which will be an html file

    
      # test
      RRun(rcmd=['print("hello cruel world")','q()'],title='test')    
    """
    rlog = []
    if not rexe:
       s = '### cannot find an R on the current path %s' % os.environ.get('PATH','')
       print s
       return [s,],[]
    print '### rexe = %s' % rexe
    assert os.path.isfile(rexe) 
    rname = '%s.R' % title
    stoname = '%s.R.log' % title 
    rfname = os.path.join(outdir,rname)
    try:
        os.makedirs(outdir) # might not be there yet...
    except:
        pass
    f = open(rfname,'w')
    if type(rcmd) == type([]):
        f.write('\n'.join(rcmd))
    else: # string
        f.write(rcmd)
    f.write('\n')
    f.close()
    stofname = os.path.join(outdir,stoname)
    sto = file(stofname,'w')
    vcl = [rexe,"--vanilla --slave", '<', rfname ]
    x = subprocess.Popen(' '.join(vcl),shell=True,stderr=sto,stdout=sto,cwd=outdir)
    retval = x.wait()
    sto.close()
    rlog = file(stofname,'r').readlines()
    rlog.insert(0,'## found R at %s' % rexe)
    flist = os.listdir(outdir)
    flist.sort
    flist = [(x,x) for x in flist] 
    for i,x in enumerate(flist):
        if x == rname:
            flist[i] = (x,'R script for %s' % title)
        elif x == stoname:
            flist[i] = (x,'R log for %s' % title)        
    return rlog,flist # for html layout
            
  

def expressionQC():
    """generate an html_file with links to interesting QC reports
    called as

<command interpreter="python">
    reQC.py '$i.extra_files_path/$i.metadata.base_name' '$title' '$outhtml' '$outhtml.extra_files_path'
    '$logtran' '$i.metadata.pheno_path' '$i.name' '$splitplots' '$grouprep'
    '$intgroup' '$dbkey' '${GALAXY_DATA_INDEX_DIR}/rg/bin/R'
</command>

    random R snippet:  lapply(lapply(ls(),get),class)
    gets class for each object in our namespace - generated by lapply(ls())
    """
    h=8
    w=10
    nparm = 11
    appname = sys.argv[0]
    if len(sys.argv) < nparm:
        print '%s requires %d parameters - only got %d - %s\n' % (appname,nparm,len(sys.argv),' '.join(sys.argv))
        sys.exit(1)
    infile = '%s.affybatch' % sys.argv[1]
    if not os.path.exists(infile):
        infile = '%s.eset' % sys.argv[1]
        if not os.path.exists(infile):
            infile = '%s.malist' % sys.argv[1]
            if not os.path.exists(infile):        
                print '%s requires an input file - supplied one, %s does not seem to exist\n' % (appname,infile)
                sys.exit(1)
    infname = os.path.split(infile)[-1] # get name part
    title = sys.argv[2]
    outfile = sys.argv[3]
    outdir = sys.argv[4]
    try:
        os.makedirs(outdir)
    except:
        pass
    logtrans = sys.argv[5]
    logtran = 'F'
    if logtrans == 'True':
        logtran = 'T'
    replaceme = string.whitespace + string.punctuation
    ttab = string.maketrans(replaceme,'_'*len(replaceme))
    title = title.translate(ttab)
    phenopath = sys.argv[6]
    esetId = sys.argv[7].translate(ttab)
    splitplots=sys.argv[8]
    grouprep=sys.argv[9].lower()
    # disabled as at october 26 due to AQM bug
    if False and grouprep == 'true':
        grouprep = True
    else:
        grouprep = False
    intgroup=sys.argv[10]
    if intgroup.lower() == 'no phenotype':
        intgroup = None
    dbkey=sys.argv[11]
    rexe = sys.argv[12]
    try:
        i = int(esetId[0])
        esetId = 'X%s' % esetId # r doesn't like symbols starting with digits
    except:
        pass
    try:
        phe = file(phenopath,'r').read()
    except:
        phe = 'Phenotype data file %s not found' % (phenopath)
    flist = [] # list tuples for html page
    s = '#R script autogenerated by Galaxy reQC tool at %s. Job title = %s.' % (timenow(),title)
    rcmd = [s,]
    rcmd += ["library(affyQCReport)","library(arrayQualityMetrics)","library(lumi)"]
    rcmd.append('sessionInfo()')
    rcmd.append('foo=load("%s")' % infile)
    rcmd.append('workingeset=get(foo)') # load and ensure eset refers to foo
    rcmd.append('klass=class(workingeset)[1]') # lumi/affy batch etc
    # this is awful but I need some R help here - how to refer to the eset loaded from infile?
    # it reappears under the original arbitrary user supplied name
    # using get means we're probably making a copy. Ugh. please, someone. FIXME
    # need to downgrade lumibatch for aqm
    rcmd.append('eset=workingeset')
    if intgroup: # must remove NA values from pheno
        rcmd.append('eset = workingeset[, (!is.na(workingeset[["%s"]]))]' % intgroup)
    rcmd.append('if (klass=="LumiBatch")')
    rcmd.append('{eset = as(workingeset,"ExpressionSet")}')
    aqmdir = os.path.join(outdir,'aqm')
    s = 'try(arrayQualityMetrics(eset, outdir="%s" , force=T, do.logtransform=%s' % (aqmdir, logtran)
    if intgroup: # not always working
            s += ',intgroup="%s"' % (intgroup)
            if grouprep:
                s += ',grouprep=T' 
    s += '))' # close the aqm call and try
    rcmd.append(s)
    rcmd.append('rm(eset)')
    # need to know how many arrays we have to make the pdfs huge enough
    # or perhaps use hexbin?
    rcmd.append('nsamp=dims(workingeset)[2,1]') # don't ask how I figured that out :)
    rcmd.append('bigw=nsamp/10') # make boxplots really wide - 10 per inch
    # one of density, boxplot, pair, MAplot, sampleRelation, outlier, cv
    rcmd.append('if (klass=="LumiBatch" || klass=="ExpressionSet") {')
    plots = ['density','cv','outlier','boxplot']
    for i,plotname in enumerate(plots):
        fname = 'QC%s_%s.pdf' % (plotname,infname)
        fpath = os.path.join(outdir,fname)
        if i < 3:
            rcmd.append('  pdf("%s",%d,%d)' % (fpath,w,h))
            s = '  try(plot(workingeset,what="%s"))' % plotname        
        else:
            rcmd.append('  pdf("%s",h=%d)' % (fpath,h)) # wide boxplot - doesn't seem to work for outlier?
            # we really need to be able to override lots of the plotting parameters in all bioc packages!
            # in particular, huge canvas for large numbers of arrays for cluster/heatmap/pair plots
            # and vertical sample labels when on x axis!
            s = '  try(plot(workingeset,what="%s",las=2,cex.axis=0.3))' % plotname        
        rcmd.append(s)
        rcmd.append('  dev.off()')
    rcmd.append('} # end if lumibatch')
    rcmd.append('if (klass=="AffyBatch") {')
    # https://www.labkey.org/wiki/home/Documentation/page.view?name=configVirtualFrame
    for i,plotname in enumerate(['titlePage','signalDist','qcplot','borderQC1',
        'borderQC2','correlationPlot']):
        fname = 'QC%s_%s.pdf' % (plotname,infname)
        fpath = os.path.join(outdir,fname)
        rcmd.append('  pdf("%s",%d,%d)' % (fpath,h,w))
        if plotname == 'qcplot': # special case
            s = '  try(plot(qc(%s)))' % esetId
        else:
            s = "  try(%s(%s))" % (plotname,esetId)
        rcmd.append(s)
        rcmd.append('  dev.off()')
    rcmd.append('} # end if affybatch') # end if
    rcmd.append('quit(save="no")')
    rlog,flist = RRun(rcmd=rcmd,title=title,outdir=outdir,rexe=rexe)
    tflist = os.listdir(aqmdir)
    if len(tflist) > 0:
      for f in tflist:
        src = os.path.join(aqmdir,f)
        dest = os.path.join(outdir,f)
        shutil.move(src,dest)
    os.rmdir(aqmdir)
    lf = file(outfile,'w')
    html = []
    qmr = 'QMreport.html'
    # add all files
    if len(tflist) == 0:
           html.append('<font color="maroon">Sorry, this expression set failed with arrayQualityMetrics - we are working with the authors to fix the problem</font><br/>')
    else:
      html.append('<div><table cellpadding="5" border="0">')
    html.append('<tr><td><a href="%s">Main arrayQualityMetrics report %s</a></td></tr>' % (qmr,title)) # or so
    flist = os.listdir(outdir)
    flist.sort()
    for fname in flist:
        if fname[:2] == 'QC': # these go first
            fpath = os.path.join(outdir,fname)
            size = ''
            if os.path.isfile(fpath):
                rsize = os.path.getsize(fpath)
                size = '(%1.1fMB)' % (float(os.path.getsize(fpath))/2**20)
            if rsize > 0:
              html.append('<tr><td><a href="%s">%s %s</a></td></tr>' % (fname,fname,size)) # or so
    for fname in flist:        
        if fname[:2] <> 'QC' and fname[:2] <> 'QM':
            fpath = os.path.join(outdir,fname)
            size=''
            if os.path.isfile(fpath):
                rsize = os.path.getsize(fpath)
            	size = '(%1.1fMB)' % (float(os.path.getsize(fpath))/2**20)
                if rsize > 0:
                    html.append('<tr><td><a href="%s">%s %s</a></td></tr>' % (fname,fname,size))
    html.append('</table><hr/></div>')
    lf.write(galhtmlprefix % appname)
    s = '\n<div><h2>Output from %s run at %s</h2><br/>\n' % (appname,timenow())
    lf.write(s)
    s = '<h3>Job title = %s. Rexpression file %s input as %s</h3>\n' % (title,esetId,infile)
    lf.write(s)
    s = '# Parameters = %s<br/>\n' % ["'%s'" % x for x in sys.argv] # quote since may have spaces
    lf.write(s)
    lf.write('</div><div><h4>ArrayQualityMetrics QC report is followed by generating R code and other outputs, below</h4><br/>\n')
    lf.write('\n'.join(html))
    lf.write('</div>\n')
    if len(rlog) > 0:
        lf.write('<div># rrun log:</div><div><pre>')
        lf.write(''.join(rlog)) # lines have \n already
        lf.write('\n</pre></div>')
    lf.write('%s\n' % galhtmlpostfix)
    lf.close()        
    
    
if __name__ == "__main__":
    # test
    # RRun(rcmd=['print("hello cruel world")','q()'],title='test')
    expressionQC()
