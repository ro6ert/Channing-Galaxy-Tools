<?xml version="1.01"?>
<tool id="reUpdate_eset_Phe001" name="Sanitize; replace phenotype data:">
<description>
from messy phenotype data
</description>
<code file="reUpdate_eset_code.py"/> 
<command interpreter="python">
reUpdate_eset.py "$i.extra_files_path" "$title" "$outhtml" "$outhtml.files_path" 
 "$i.metadata.base_name" "$i.ext" "R" "$p" "$c" "$anno"
</command> 
 	
<inputs>
    <param name="title" label="Title for history outputs" type="text" size="255" value="reUpdate_eset" />
    <param name="i" type="data" format="affybatch,eset,malist" 
                label="Expression data set chosen from your history" optional="false"
                size="5"  />  
    <param name="p" type="data" format="tabular,xls" 
                label="REPLACE phenotype with tabular from your history" optional="true"
                help = "Please choose *very* carefully - make sure the ids are right - you can easily mess up an eset!"
                size="5"  />  
    <param name="c" type="integer" 
                help="This column in the new file must have same sample IDs as current pheno first column"
               label="ID column (1=first) to use from new phenotype file" size="3" value="1" />
    <param name="anno" type="text"
                label="REPLACE expressionset annotation slot with this string" optional="true"
                help = "Please choose *very* carefully - make sure this is right - you can easily mess up an eset!"
                size="50"  />  
    <param label="Genome" name="dbkey" type="select" dynamic_options="get_available_builds('hg18')" />
</inputs>

    <outputs>  
    <data format='eset' name="outhtml" metadata_source='i'/>
</outputs>


<help>


**Syntax**

- **Title** is used to name the output files - it helps to make it meaningful
- **Expression Data** is an Rexpression datatype from your current history 
- **Replace** is an optional tabular phenotype file to REPLACE the one that's currently there. 

-----

**WARNING**

The replacement of a phenotype data structure in an eset is not for the feint of heart. It is extremely easy to turn 
a perfectly meaningful eset into what is essentially completely useless. Please do not do this unless you are confident
that you have exactly the same id's for the same subjects.
of rows. 

Please do not do this unless you are confident that you have exactly the same id's for the same subjects in exactly
the same order as the existing one, and that you have a header row with the phenotype names.

This can be very useful if you understand what you're doing, because the pheno columns 
ones you get from colleagues and public databases are sometimes in need of cleaning.

The most common challenge arises when the submitter for some inexplicable
reason supplies a concatenation of >1 field as a single, arbitrarily delimited and sometimes badly formed field.

These are often brutally ugly and without splitting, may not appear in the tool choice because they are 
all different and so considered uninteresting.

-----

**Summary**

This tool removes certain non-alphabetic metacharacters like commas and colons which can
cause consternation in some BioConductor and other tools, because they confuse simple parsers
looking for commas or colons put there by the program. Optionally, the entire phenotype dataset
can be replaced with a new one chosen from your history.

It will produce a new expression dataset but all metacharacters will be purged. Note that our ArrayExpress
and GEOquery based tools already take care of this - but if you experience breakage with parameters in processing
an expression set obtained from elsewhere, this tool might save your day.

Originally designed and written for the Rexpression BioC/Galaxy tools by ross lazarus (ross d0t lazarus at gmail d0t com) August 2008
Copyright Ross Lazarus 2008
Licensed under the LGPL as documented http://www.gnu.org/licenses/lgpl.html


</help>
</tool>
