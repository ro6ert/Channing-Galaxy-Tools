<tool name="Sam/bam Validate:" id="PicardValidate" version="0.01">
  <description>using Picard</description>
  <command interpreter="python">
    rgPicardValidate.py -i "$input_file" --datatype "$input_file.ext" -d "$html_file.files_path" -o "$html_file"
    -t "$out_prefix" -e "$ignore" -b "$bisulphite" -m "$maxerrors" -y "$new_format"
    -j ${GALAXY_DATA_INDEX_DIR}/shared/jars/ValidateSamFile.jar
#if $genomeSource.refGenomeSource == "history":
    -r "$genomeSource.ownFile"
#elif $genomeSource.refGenomeSource=="indexed":
    -r "${ filter( lambda x: str( x[0] ) == str( $genomeSource.index ), $__app__.tool_data_tables[ 'all_fasta' ].get_fields() )[0][-1] }"
#end if

#if $new_format.value == "sam":
 --sam "$out_file"
#elif $new_format.value == "bam":
 --bam "$out_file"
#end if
  </command>
  <inputs>
    <param format="sam,bam" name="input_file" type="data" label="Input: sam or bam format short read data in your current history"
      help="If the select list is empty, you need to upload or import some aligned short read data from a shared library"/>
    <param name="out_prefix" value="Clean" type="text"
      label="Title for the tool run - use this remind you what the job was for" size="80" />
    <param name="new_format" type="select" label="Output file options" display="radio">
      <option value="dryrun" selected='true'>No 'clean' output file will be created - report errors only</option>
      <option value="sam">Sam format - all flagged reads removed</option>
      <option value="bam">Bam format - all flagged reads removed</option>
    </param>
    <param name="bisulphite" type="boolean" label="Input file contains Bisulphite sequenced reads" checked="false"
      falsevalue="false" truevalue="true" />

    <conditional name="genomeSource">
      <param name="refGenomeSource" type="select" help="If in doubt, choose built-in and read Picard/Samtools documentation"
         label="Reference genome - none, built-in or from current history?">
        <option value="noref" >No reference - NM tags will NOT be validated (see Picard documentation)</option>
        <option value="indexed" selected="true">Use a built-in genome</option>
        <option value="history">Use a genome (fasta format) from my history</option>
      </param>
      <when value="indexed">    
        <param name="index" type="select" label="Select a reference genome">
          <options from_data_table="all_fasta"> 
          <filter type="data_meta" ref="input_file" key="dbkey" column="dbkey" multiple="True" separator=","/>
          <validator type="no_options" message="No reference sequences are available for the build associated with the selected input data"/>
          </options>
        </param>

      </when>
      <when value="history">
        <param name="ownFile" type="data" format="fasta" metadata_name="dbkey" label="Select a reference genome from history" />
      </when>
      <when value="noref">
      </when>
    </conditional>
    <param name="ignore" type="select" label="Ignore these Picard Validate errors - select none, one or more" size="80" multiple="true" display="checkboxes">
        <option value="ADJACENCT_INDEL_IN_CIGAR">ADJACENCT_INDEL_IN_CIGAR</option>
        <option value="BAM_FILE_MISSING_TERMINATOR_BLOCK">BAM_FILE_MISSING_TERMINATOR_BLOCK</option>
        <option value="CIGAR_MAPS_OFF_REFERENCE">CIGAR_MAPS_OFF_REFERENCE</option>
        <option value="E2_BASE_EQUALS_PRIMARY_BASE">E2_BASE_EQUALS_PRIMARY_BASE</option>
        <option value="EMPTY_READ">EMPTY_READ</option>
        <option value="HEADER_RECORD_MISSING_REQUIRED_TAG">HEADER_RECORD_MISSING_REQUIRED_TAG</option>
        <option value="HEADER_TAG_MULTIPLY_DEFINED">HEADER_TAG_MULTIPLY_DEFINED</option>
        <option value="INVALID_ALIGNMENT_START">INVALID_ALIGNMENT_START</option>
        <option value="INVALID_CIGAR">INVALID_CIGAR</option>
        <option value="INVALID_DATE_STRING">INVALID_DATE_STRING</option>
        <option value="INVALID_FLAG_FIRST_OF_PAIR">INVALID_FLAG_FIRST_OF_PAIR</option>
        <option value="INVALID_FLAG_MATE_NEG_STRAND">INVALID_FLAG_MATE_NEG_STRAND</option>
        <option value="INVALID_FLAG_MATE_UNMAPPED">INVALID_FLAG_MATE_UNMAPPED</option>
        <option value="INVALID_FLAG_NOT_PRIM_ALIGNMENT">INVALID_FLAG_NOT_PRIM_ALIGNMENT</option>
        <option value="INVALID_FLAG_READ_UNMAPPED">INVALID_FLAG_READ_UNMAPPED</option>
        <option value="INVALID_FLAG_SECOND_OF_PAIR">INVALID_FLAG_SECOND_OF_PAIR</option>
        <option value="INVALID_INDEXING_BIN">INVALID_INDEXING_BIN</option>
        <option value="INVALID_INSERT_SIZE">INVALID_INSERT_SIZE</option>
        <option value="INVALID_MAPPING_QUALITY">INVALID_MAPPING_QUALITY</option>
        <option value="INVALID_MATE_REF_INDEX">INVALID_MATE_REF_INDEX</option>
        <option value="INVALID_PREDICTED_MEDIAN_INSERT_SIZE">INVALID_PREDICTED_MEDIAN_INSERT_SIZE</option>
        <option value="INVALID_REFERENCE_INDEX">INVALID_REFERENCE_INDEX</option>
        <option value="INVALID_TAG_NM">INVALID_TAG_NM</option>
        <option value="INVALID_VERSION_NUMBER">INVALID_VERSION_NUMBER</option>
        <option value="MATE_FIELD_MISMATCH">MATE_FIELD_MISMATCH</option>
        <option value="MISMATCH_FLAG_MATE_NEG_STRAND">MISMATCH_FLAG_MATE_NEG_STRAND</option>
        <option value="MISMATCH_FLAG_MATE_UNMAPPED">MISMATCH_FLAG_MATE_UNMAPPED</option>
        <option value="MISMATCH_MATE_ALIGNMENT_START">MISMATCH_MATE_ALIGNMENT_START</option>
        <option value="MISMATCH_MATE_REF_INDEX">MISMATCH_MATE_REF_INDEX</option>
        <option value="MISMATCH_READ_LENGTH_AND_E2_LENGTH">MISMATCH_READ_LENGTH_AND_E2_LENGTH</option>
        <option value="MISMATCH_READ_LENGTH_AND_QUALS_LENGTH">MISMATCH_READ_AND_QUALS_LENGTH</option>
        <option value="MISMATCH_READ_LENGTH_AND_U2_LENGTH">MISMATCH_READ_LENGTH_AND_U2_LENGTH</option>
        <option value="MISSING_HEADER">MISSING_HEADER</option>
        <option value="MISSING_READ_GROUP">MISSING_READ_GROUP</option>
        <option value="MISSING_SEQUENCE_DICTIONARY">MISSING_SEQUENCE_DICTIONARY</option>
        <option value="MISSING_TAG_NM">MISSING_TAG_NM</option>
        <option value="MISSING_VERSION_NUMBER">MISSING_VERSION_NUMBER</option>
        <option value="PAIRED_READ_NOT_MARKED_AS_FIRST_OR_SECOND">PAIRED_READ_NOT_FIRST_OR_SECOND</option>
        <option value="POORLY_FORMATTED_HEADER_TAG">POORLY_FORMATTED_HEADER_TAG</option>
        <option value="READ_GROUP_NOT_FOUND">READ_GROUP_NOT_FOUND</option>
        <option value="RECORD_OUT_OF_ORDER">RECORD_OUT_OF_ORDER</option>
        <option value="TAG_VALUE_TOO_LARGE">TAG_VALUE_TOO_LARGE</option>
        <option value="TRUNCATED_FILE">TRUNCATED_FILE</option>
        <option value="UNRECOGNIZED_HEADER_TYPE">UNRECOGNIZED_HEADER_TYPE</option>
       <option value="INVALID_FLAG_PROPER_PAIR">INVALID_FLAG_PROPER_PAIR</option>
    </param>

    <param name="maxerrors" type="integer" label="Maximum number of errors to output" value="100"
    help="Set to zero to see every durn one. Default value: 100"/>
  </inputs>
  <outputs>
    <data format="html" name="html_file" label="${out_prefix}.html"/>
    <data format="sam" name="out_file" label="${out_prefix}.sam" metadata_source="input_file">
    <filter>new_format == "sam" </filter>
    </data>
    <data format="bam" name="out_file" label="${out_prefix}.bam" metadata_source="input_file">
    <filter>new_format == "bam" </filter>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="out_prefix" value="Clean" />
      <param name="bisulphite" value="false" />
      <param name="ignore" value="INVALID_TAG_NM" />
      <param name="maxerrors" value="100" />
      <param name="refGenomeSource" value="indexed" />
      <param name="index" value="hg18" />
      <param name="new_format" value="dryrun" />
      <param name="input_file" value="picard_input_tiny.sam" ftype="sam" dbkey="hg18" />
      <output name="html_file" file="picard_output_validate_tiny_sam.html" ftype="html" lines_diff="30"/>
    </test>
  </tests>
  <help>


.. class:: infomark

**Syntax**

- **Input** is sam/bam format aligned short read data in your current history
- **Title** is the title to use for all output files from this job - use it for high level metadata
- **Output options** None=Just run the validator - do not produce a new output file sam/bam=Remove all flagged 'error' reads
- **Bisulphite Treated** see Picard documentation http://picard.sourceforge.net/command-line-overview.shtml#ValidateSamFile
- **Refseq** is the sequence you want to interogate - eg hg19 - can be Galaxy built-in or a special one from your history
- **Maximum Errors** see Picard documentation http://picard.sourceforge.net/command-line-overview.shtml#ValidateSamFile
- **Ignore chosen errors** See Picard documentation at http://picard.sourceforge.net/command-line-overview.shtml#ValidateSamFile

-----

.. class:: infomark

**Summary**

This Galaxy tool uses Picard to report and optionally filter out all reads with Picard detected errors.

Picard is supported through the SamTools project. This tool wraps Picard and is supported through the galaxy-bugs mailing list or by providing comments through the report form that appears automatically
if a tool fails unexpectedly when you run it in Galaxy.

All the Picard tools are freely available and are documented at http://picard.sourceforge.net/command-line-overview.shtml#CollectAlignmentSummaryMetrics

-----

.. class:: infomark

**Picard Documentation**

The Picard documentation (reformatted for Galaxy) says:

ValidateSamFile

USAGE: net.sf.picard.sam.ValidateSamFile [options]

Read a SAM or BAM file and report on its validity.

.. csv-table:: Picard Validate

   :header-rows: 1

    Option,Description
    INPUT=File,"Input SAM/BAM file Required."
    OUTPUT=File,"Output file or standard out if missing Default value: null."
    MODE=Mode,"Mode of output Default value: VERBOSE. This option can be set to 'null' to clear the default value. Possible values: {VERBOSE, SUMMARY}"
    IGNORE=Type,"List of validation error types to ignore. Possible values: {INVALID_FLAG_PROPER_PAIR, INVALID_FLAG_MATE_UNMAPPED, MISMATCH_FLAG_MATE_UNMAPPED, INVALID_FLAG_MATE_NEG_STRAND, MISMATCH_FLAG_MATE_NEG_STRAND, INVALID_FLAG_FIRST_OF_PAIR, INVALID_FLAG_SECOND_OF_PAIR, PAIRED_READ_NOT_MARKED_AS_FIRST_OR_SECOND, INVALID_FLAG_NOT_PRIM_ALIGNMENT, INVALID_FLAG_READ_UNMAPPED, INVALID_INSERT_SIZE, INVALID_MAPPING_QUALITY, INVALID_CIGAR, ADJACENCT_INDEL_IN_CIGAR, INVALID_MATE_REF_INDEX, MISMATCH_MATE_REF_INDEX, INVALID_REFERENCE_INDEX, INVALID_ALIGNMENT_START, MISMATCH_MATE_ALIGNMENT_START, MATE_FIELD_MISMATCH, INVALID_TAG_NM, MISSING_TAG_NM, MISSING_HEADER, MISSING_SEQUENCE_DICTIONARY, MISSING_READ_GROUP, RECORD_OUT_OF_ORDER, READ_GROUP_NOT_FOUND, INVALID_INDEXING_BIN, MISSING_VERSION_NUMBER, INVALID_VERSION_NUMBER, TRUNCATED_FILE, MISMATCH_READ_LENGTH_AND_QUALS_LENGTH, EMPTY_READ, CIGAR_MAPS_OFF_REFERENCE, MISMATCH_READ_LENGTH_AND_E2_LENGTH, MISMATCH_READ_LENGTH_AND_U2_LENGTH, E2_BASE_EQUALS_PRIMARY_BASE, BAM_FILE_MISSING_TERMINATOR_BLOCK, UNRECOGNIZED_HEADER_TYPE, POORLY_FORMATTED_HEADER_TAG, HEADER_TAG_MULTIPLY_DEFINED, HEADER_RECORD_MISSING_REQUIRED_TAG, INVALID_DATE_STRING, TAG_VALUE_TOO_LARGE, INVALID_INDEX_FILE_POINTER, INVALID_PREDICTED_MEDIAN_INSERT_SIZE, DUPLICATE_READ_GROUP_ID, DUPLICATE_PROGRAM_GROUP_ID} This option may be specified 0 or more times."
    MAX_OUTPUT=Integer,"The maximum number of lines output in verbose mode Default value: 100. "
    REFERENCE_SEQUENCE=File,"Reference sequence file, the NM tag check will be skipped if this is missing Default value: null."
    IGNORE_WARNINGS=Boolean,"If true, only report errors, and ignore warnings. Default value: false. "
    VALIDATE_INDEX=Boolean,"If true and input is a BAM file with an index file, also validates the index. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
    IS_BISULFITE_SEQUENCED=Boolean,"Whether the SAM or BAM file consists of bisulfite sequenced reads. If so, C->T is not counted as an error in computing the value of the NM tag. Default value: false."
    CREATE_MD5_FILE=Boolean,"Whether to create an MD5 digest for any BAM files created. Default value: false. "

-----

.. class:: infomark


**Why you might want to use this tool**

This tool provides a Galaxy interface to one of the Picard tools.
Picard seems (in our hands) fragile to irregularities in data
This tool allows you to see what's wrong and optionally remove all the relevant 'error reads' 
This is clearly an awful way to clean your alignments, but until someone can improve on this it will have to do

Send code please.

If your Picard jobs die, with or without some explanation, try this tool.
You may optionally do a dry run and not create a 'clean' file
Or you can choose to ignore one or more of the error flag reads if you have specific needs.

-----

.. class:: infomark

**Attributions**

Picard and Samtools go together. They are external to and completely independent of Galaxy. We acknowledge that all credit for
their methods and contribution are due to their authors and maintainers.

Here, you can apply Picard tools through Galaxy which might be easier than through the native Picard command line interface.

-----

.. class:: infomark

**Copyright**

This Galaxy tool is a component of the rgenetics toolkit.

Written by and copyright Ross Lazarus, ross.lazarus at gmail etc, September 2010

All rgenetics artifacts are available licensed under the LGPL
Other dependencies are licensed at the author's discretion - please see each individual package for details

  </help>
</tool>
