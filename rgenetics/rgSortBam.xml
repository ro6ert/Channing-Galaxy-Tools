<tool name="Sam/bam Sorter:" id="rgSamSort" version="0.01">
  <description>Add header and sort a sam/bam</description>
  <command interpreter="python">
   rgSortBam.py -i "$input_file" --informat "$input_file.ext" -n "$out_prefix" -o "$out_file"
   --newformat "$newformat" --tmpdir "${__new_file_path__}" -m "$html_file" -d "$html_file.files_path" 
   $runCleanSam $runCalmd -j ${GALAXY_DATA_INDEX_DIR}/shared/jars/CleanSam.jar
#if $newHead.refGenomeSource=="indexed":
   --fai "${ filter( lambda x: str( x[0] ) == str( $newHead.indexsrc ), $__app__.tool_data_tables[ 'ref_genome_fasta' ].get_fields() )[0][-1] }"
#else
   --fasta "$newHead.indexsrc"
#end if
  </command>
  <inputs>
    <param format="sam,bam" name="input_file" type="data" label="Input: sam or bam format short read data in your current history"
      help="If the select list is empty, you need to upload or import some aligned short read data from a shared library"/>
    <param name="runCalmd" type="boolean" label="Run samtools calmd on output" checked="false"
    falsevalue="" truevalue="--runcalmd 'true'"
    help="Assigns mismatch information in the optional MD tag for M cigar reads - some downstream tools need this - see the samtools documentation" />
    <param name="runCleanSam" type="boolean" label="Run Picard CleanSam on the output" checked="false"
    falsevalue="" truevalue="--runcleansam 'true'" 
    help="Currently only removes reads over the end of the refseq - some downstream tools need this - see the Picard documentation" />
    <conditional name="newHead">
      <param name="refGenomeSource" type="select" help="If in doubt, choose built-in and read Picard/Samtools documentation"
         label="Source for new @SQ records - built-in or from current history?">
        <option value="indexed">Use a built-in genome</option>
        <option value="history">Use a genome (fasta format) from my history</option>
      </param>
      <when value="indexed">
        <param name="indexsrc" type="select" label="Select a reference genome">
         <options from_data_table="ref_genome_fasta" > 
          <filter type="data_meta" ref="input_file" key="dbkey" column="value" multiple="True" separator=","/>
          <validator type="no_options" message="No reference sequences are available for the build associated with the selected input data"/>
          </options>
        </param>
      </when>
      <when value="history">
        <param name="indexsrc" type="data" format="fasta" metadata_name="dbkey" 
        label="Create new @SQ records from a reference genome file in your history" />
      </when>
    </conditional>
    <param name="out_prefix" value="Sorted" type="text"
      label="Title for the output file - use this remind you what the job was for" size="120" />
    <param name="newformat" type="select" label="Output file format" size="2">
      <option value="bam" selected="true">Bam format</option>
      <option value="sam">Sam format</option>
    </param>

  </inputs>
  <outputs>
    <data format="sam" name="out_file" label="SortBam_${out_prefix}.${newformat}">
    <change_format>
     <when input="newformat" value="bam" format="bam" />
    </change_format> 
    </data>
    <data format="html" name="html_file" label="SortBam_${out_prefix}.html" />
  </outputs>
  <tests>

    <test>
      <param name="out_prefix" value="Sorted" />
      <param name="newformat" value="sam" />
      <param name="runCalmd" value="true" />
      <param name="runCleanSam" value="true" />
      <param name="refGenomeSource" value="history" />
      <param name="indexsrc" value="picard_input_hg18.trimmed.fasta" />
      
      <param name="input_file" value="picard_input_sorted_pair.sam" />
      <output name="out_file" file="samtools_output_sort_sorted_pair.sam" />
      <output name="html_file" file="samtools_output_sortsam_sorted_pair.html" ftype="html" lines_diff="125" />

    </test>
    <test>
      <param name="out_prefix" value="Sorted" />
      <param name="newformat" value="bam" />
      <param name="runCalmd" value="true" />
      <param name="runCleanSam" value="true" />
      <param name="refGenomeSource" value="history" />
      <param name="indexsrc" value="picard_input_hg18.trimmed.fasta" />

      <param name="input_file" value="picard_input_sorted_pair.sam" />
      <output name="out_file" file="samtools_output_sort_sorted_pair.bam" />
      <output name="html_file" file="samtools_output_sortbam_sorted_pair.html" ftype="html" lines_diff="125" />

    </test>
  
  </tests>
  <help>


.. class:: infomark

**Purpose**

As a result of third party tools that emit sam/bam files containing errors or without valid headers, sometimes you need to fix things so the sam/bam has a 
legal header and is sorted.

Sometimes you also want to get rid of all the errors a Picard tool might barf out on. If that's what you need, this tool might help.

-----

.. class:: infomark

**Syntax**

- **Input** is sam/bam format aligned short read data in your current history
- **Reference Genome** is used to replace all the @SQ metadata in the input 
- **Title** is the title to use for all output files from this job - use it for high level metadata
- **Output Format** is either sam or compressed as bam

-----

.. class:: infomark

**Summary**

The sam/bam specification wimps out about headers, stating that they are 'recommended' and silent on sorting sequences and 
all the potential errors that a sam file can contain - like reads exceeding the boundaries of a reference sequence.

This brutal Galaxy tool sorts an existing bam or sam file after rewriting the header for picky downstream tools 
(Picard, we're all looking at you) and tools that can emit broken sam files (bwa, we're looking at you too)

**WARNING** A (foolish) user can easily replace the header from an hg18 sam file with mm8 if they want to
There are no protections on the source for your reference sequence to use as the sequence dict header for the output file if you use a history file
Only the specified dbkey associated with the input data can be used if you select a built-in genome.

This is an extremely brutal tool but it will do it's best to preserve any non @SQ metadata in the input file
To do that involves futzing beyond belief - lucky for you I wrote this tool....

-----

.. class:: infomark

**Copyright and Attributions**

This Galaxy tool is a component of the rgenetics toolkit.

Written by and copyright Ross Lazarus, ross.lazarus at gmail etc, September 2010
Code cleaned up and the ugliest hacks repaired by Raphael Lullis

All rgenetics artifacts are available licensed under the LGPL
Other dependencies are licensed at the author's discretion - please see each individual package for details

  </help>
</tool>

