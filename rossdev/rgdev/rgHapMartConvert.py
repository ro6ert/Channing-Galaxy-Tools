"""
changed to create separate haploview 'hapmap' format 
files for each chromosome so haploview doesn't barf

Note - currently only works for haploview beta release
as hapmap 3 data output format was used as the model...

Ross Lazarus 30 June 2009
Hapmart dump to haploview hapmap genotype format for Benji

logic is:

Just to be clear - check this over please?

Hapmap format

1:rs# 2:alleles 3:chrom 4:pos 5:strand 6:assembly# 7:center 8:protLSID
9:assayLSID 10:panelLSID 11:QCcode 12:NA06984 NA0698..

HapMart format
1:chromosome   2:position    3:Strand   4:marker id    5:Alleles
6:reference allele    7:genotyping center    8:genotyping platform
9:POP:CEU 10[NA06984...

So, from hapmart to hapmap
1->3
2->4
3->5
4->1
5->2
     6 is junk
     7 is junk
     8 is junk
     9 is junk
     10 is junk
     11 is QC+
10->12 with tabs as seps instead of space and removing the [] chars
"""

import sys,time,os

PROGNAME = os.path.split(sys.argv[0])[-1]

def timenow():
    """return current time as a string
    """
    return time.strftime('%d/%m/%Y %H:%M:%S', time.localtime(time.time()))

def writeHapmap(outfpath=None,res=[], infpath=None,hmhead=None):
    """
    rs# alleles chrom pos strand assembly# center protLSID assayLSID panelLSID QCcode NA06984 NA06985 NA0$

    hapmap format looks like:
    #Tue Jun 30 11:15:24 2009: HapMap genotype data dump, SNPs genotyped in population CEU on chr4:38450658..38460984
#For details on file format, see http://www.hapmap.org/genotypes/
rs# alleles chrom pos strand assembly# center protLSID assayLSID panelLSID QCcode
rs10776482 A/G chr4 38451180 + ncbi_b36 sanger urn:LSID:illumina.hapmap.org:Protocol:Human_1M_BeadChip:3 urn:LSID:sanger.hapmap.org:Assay:H1Mrs10776482:3 urn:lsid:dcc.hapmap.org:Panel:CEPH-60-trios
rs4129009 C/T chr4 38451284 + ncbi_b36 sanger urn:LSID:illumina.hapmap.org:Protocol:Human_1M_BeadChip:3 urn:LSID:sanger.hapmap.org:Assay:H1Mrs4129009:3 urn:lsid:dcc.hapmap.org:Panel:CEPH-60-trios:3 QC+ TT CT TT TT CT TT 
    """
    head = ' '.join(hmhead)
    f = open(outfpath,'w')
    t = ['# %s generated by %s from infile %s' % (timenow(),PROGNAME,infpath)]
    t.append('# see whatever')
    f.write('\n'.join(t))
    f.write('\n')
    f.write(head)
    f.write('\n')
    f.write('\n'.join(res))
    f.write('\n')
    f.close()

def readMart(infpath=None):
    """ read header row and parse what we need
    hapmart format looks like:
    chromosome    position    Strand    marker id    Alleles    reference allele    genotyping center    genotyping platform
chr2    230747154    +    rs1004868    A/G    G    sanger    Illumina_1M    GG NN AG GG GG GG GG GG GG AG GG NN GG GG GG NN GG GG NN GG GG GG GG GG AG GG AG GG GG GG GG GG GG GG AG GG GG AG GG AG GG GG NN GG GG GG GG GG NN GG NN GG GG GG GG GG GG GG GG GG GG GG GG GG GG GG GG GG GG GG AG GG GG GG GG GG AG GG GG NN GG GG GG GG GG GG GG GG AG GG AG GG GG GG NN GG GG GG AG GG AG AG GG GG GG GG GG AG GG GG AG AG GG GG GG AG GG GG GG GG GG GG GG GG GG GG AG NN AG GG GG GG GG GG AG GG GG GG GG GG GG GG AG GG GG AG GG GG GG AG GG GG GG GG GG GG GG GG GG AG GG AG GG GG GG GG GG GG GG AG AG GG AG AG
chr2    230747515
move 1->3
2->4
3->5
4->1
5->2
    """
    print 'infpath=',infpath
    f = open(infpath,'r')    
    filler = ['ncbi_b36','sanger','urn:LSID:illumina.hapmap.org:Protocol:Human_1M_BeadChip:3',
              'urn:LSID:sanger.hapmap.org:Assay:H1Mrs10776482:3','urn:lsid:dcc.hapmap.org:Panel:CEPH-60-trios:3','QC+']
    res = {}
    for i,row in enumerate(f):
        if i == 0:
            header = row.strip().split('\t') # spaces in ids dealt with later
            idlist = header[-1].strip()
            h = [x.lower() for x in header] # mmmff
            chrpos = h.index('chromosome')
            pospos = h.index('position')
            strandpos = h.index('strand')
            rspos = h.index('marker id')
            allelepos = h.index('alleles')
            wewant = [rspos,allelepos,chrpos,pospos,strandpos]
            idlist = idlist.replace('[','')
            idlist = idlist.replace(']','')
            idlist = idlist.split()[1:] #get rid of pop:Ceu
            nid = len(idlist)
            hmhead = 'rs# alleles chrom pos strand assembly# center protLSID assayLSID panelLSID QCcode'.split()
            hmhead += idlist           
        else:
            rowl = row.strip().split()
            if len(rowl) > 2:
                genos = rowl[-nid:] # last nid things
                hrow = [rowl[x] for x in wewant] # gets the fields in order
                chrom = rowl[chrpos]
                hrow += filler
                hrow += genos
                res.setdefault(chrom,[])
                res[chrom].append(' '.join(hrow))
    return res,hmhead
    
    
if __name__ == "__main__":   
    if len(sys.argv) < 2:
        print 'Need a hapmart output file as the first command line parameter'
        sys.exit(1)
    infname = sys.argv[1]
    fname = os.path.split(infname)[-1]
    outfname = 'hapmap_%s' % fname
    res,hmhead = readMart(infpath=infname)
    chroms = res.keys()
    chroms.sort()
    for c in chroms:
        outf = '%s_%s' % (c,fname)
        writeHapmap(outfpath=outf,res=res[c],infpath=infname,hmhead=hmhead)
    
    
    